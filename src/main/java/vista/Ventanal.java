/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.beans.IntrospectionException;
import java.math.BigDecimal;
import java.sql.Connection;

import javax.swing.BoxLayout;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import javafx.event.ActionEvent;
import modelo.db.Conexion;
import modelo.db.OperacionesBD_distribuidor;
import modelo.db.OperacionesBD_pedido;
import modelo.db.OperacionesBD_producto;
import modelo.db.OperacionesBD_usuario;
import modelo.entidad.Distribuidor;
import modelo.entidad.Pedido;
import modelo.entidad.Producto;
import modelo.entidad.Usuario;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author javit
 */
public class Ventanal extends javax.swing.JFrame {
    DefaultTableModel dtmPedido = new DefaultTableModel();
    DefaultTableModel dtmProducto = new DefaultTableModel();
    DefaultTableModel dtmDistribuidor = new DefaultTableModel();
    DefaultTableModel dtmUsuario = new DefaultTableModel();
    DefaultTableModel dtmeditUser = new DefaultTableModel();
    DefaultTableModel dtmeditDist = new DefaultTableModel();
    DefaultTableModel dtmeditProd = new DefaultTableModel();
    Usuario logger;
    /**
     * Creates new form Ventanal
     */
    public Ventanal() {
        setLocationRelativeTo(null);
        initComponents();
        String[] tituloPedido = new String[]{"ID", "Usuario", "Fecha", "Producto", "Distribuidor"};
        String[] tituloProducto = new String[]{"Nombre", "Tipo", "Distribuidor", "Precio", "Cantidad"};
        String[] tituloDistribuidor = new String[]{"ID", "Nombre", "Mail", "Telefono"};
        String[] tituloUsuario = new String[]{"Nombre", "Rango", "SSId", "Mail", "Telefono"};
        String[] tituloEditUser = new String[]{"Nombre", "Rango", "SSId", "Mail", "Telefono"};
        String[] tituloEditDist = new String[]{"ID", "Nombre", "Mail", "Telefono"};
        String[] tituloEditProd = new String[]{"Nombre", "Tipo", "Distribuidor", "Precio", "Cantidad"};
        
        dtmProducto = new DefaultTableModel(tituloProducto, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Las celdas no son editables
            }
        };
        
        dtmPedido = new DefaultTableModel(tituloPedido, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Las celdas no son editables
            }
        };
        
        dtmDistribuidor = new DefaultTableModel(tituloDistribuidor, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Las celdas no son editables
            }
        };
        
        dtmUsuario = new DefaultTableModel(tituloUsuario, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Las celdas no son editables
            }
        };
        dtmeditDist = new DefaultTableModel(tituloEditDist, 0);
        dtmeditProd = new DefaultTableModel(tituloEditProd, 0);
        dtmeditUser = new DefaultTableModel(tituloEditUser, 0);
        pedidosTable.setModel(dtmPedido);
        productosTable.setModel(dtmProducto);
        distribuidoresTable.setModel(dtmDistribuidor);
        usuariosTable.setModel(dtmUsuario);
        pedidosTable.setModel(dtmPedido);
        productosTable.setModel(dtmProducto);
        distribuidoresTable.setModel(dtmDistribuidor);
        usuariosTable.setModel(dtmUsuario);
        editUserTable.setModel(dtmeditUser);
        distEditTable.setModel(dtmeditDist);
        editProdTable.setModel(dtmeditProd);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        Contenedor = new javax.swing.JPanel();
        loggin = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        userText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        passField = new javax.swing.JPasswordField();
        access = new javax.swing.JButton();
        menuAdmin = new javax.swing.JPanel();
        pedidosButton = new javax.swing.JButton();
        productosButton = new javax.swing.JButton();
        contabilidadButton = new javax.swing.JButton();
        distribuidoresButton = new javax.swing.JButton();
        usuariosButton = new javax.swing.JButton();
        salir = new javax.swing.JButton();
        pedidosPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pedidosTable = new javax.swing.JTable();
        doPedido = new javax.swing.JButton();
        atras = new javax.swing.JButton();
        productosPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        productosTable = new javax.swing.JTable();
        addProducto = new javax.swing.JButton();
        atras2 = new javax.swing.JButton();
        editProduct = new javax.swing.JButton();
        distribuidoresPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        distribuidoresTable = new javax.swing.JTable();
        addDist = new javax.swing.JButton();
        atras3 = new javax.swing.JButton();
        editDist = new javax.swing.JButton();
        usuariosPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        usuariosTable = new javax.swing.JTable();
        addUsuario = new javax.swing.JButton();
        atras4 = new javax.swing.JButton();
        editUsers = new javax.swing.JButton();
        productosEditar = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        editProdTable = new javax.swing.JTable();
        acceptProduct = new javax.swing.JButton();
        cancelProducto = new javax.swing.JButton();
        delProd = new javax.swing.JButton();
        usuariosEditar = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        editUserTable = new javax.swing.JTable();
        acceptUser = new javax.swing.JButton();
        cancelUser = new javax.swing.JButton();
        delUsers = new javax.swing.JButton();
        distribuidoresEditar = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        distEditTable = new javax.swing.JTable();
        acceptDist = new javax.swing.JButton();
        cancelDist = new javax.swing.JButton();
        delDist = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("StockManager");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Contenedor.setMaximumSize(new java.awt.Dimension(600, 400));
        Contenedor.setMinimumSize(new java.awt.Dimension(400, 250));
        Contenedor.setPreferredSize(new java.awt.Dimension(400, 250));
        Contenedor.setLayout(new java.awt.CardLayout());

        loggin.setMaximumSize(new java.awt.Dimension(400, 250));
        loggin.setMinimumSize(new java.awt.Dimension(400, 250));
        loggin.setPreferredSize(new java.awt.Dimension(400, 250));
        loggin.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Usuario");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        loggin.add(jLabel1, gridBagConstraints);

        userText.setMinimumSize(new java.awt.Dimension(200, 22));
        userText.setPreferredSize(new java.awt.Dimension(100, 22));
        userText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        loggin.add(userText, gridBagConstraints);

        jLabel2.setText("Contrase√±a");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        loggin.add(jLabel2, gridBagConstraints);

        passField.setPreferredSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        loggin.add(passField, gridBagConstraints);

        access.setText("Acceder");
        access.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accessActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        loggin.add(access, gridBagConstraints);

        Contenedor.add(loggin, "card2");

        menuAdmin.setMaximumSize(new java.awt.Dimension(600, 400));
        menuAdmin.setMinimumSize(new java.awt.Dimension(600, 400));
        menuAdmin.setPreferredSize(new java.awt.Dimension(600, 400));
        menuAdmin.setLayout(new java.awt.GridBagLayout());

        pedidosButton.setText("Pedidos");
        pedidosButton.setMaximumSize(new java.awt.Dimension(99, 23));
        pedidosButton.setMinimumSize(new java.awt.Dimension(99, 23));
        pedidosButton.setPreferredSize(new java.awt.Dimension(109, 23));
        pedidosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pedidosButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 6;
        gridBagConstraints.ipady = 38;
        gridBagConstraints.insets = new java.awt.Insets(5, 6, 6, 490);
        menuAdmin.add(pedidosButton, gridBagConstraints);

        productosButton.setText("Productos");
        productosButton.setPreferredSize(new java.awt.Dimension(94, 23));
        productosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productosButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 21;
        gridBagConstraints.ipady = 38;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 0, 490);
        menuAdmin.add(productosButton, gridBagConstraints);

        contabilidadButton.setText("Contabilidad");
        contabilidadButton.setPreferredSize(new java.awt.Dimension(109, 23));
        contabilidadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contabilidadButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 38;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 6, 490);
        menuAdmin.add(contabilidadButton, gridBagConstraints);

        distribuidoresButton.setText("Distribuidores");
        distribuidoresButton.setPreferredSize(new java.awt.Dimension(115, 23));
        distribuidoresButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distribuidoresButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipady = 38;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 0, 490);
        menuAdmin.add(distribuidoresButton, gridBagConstraints);

        usuariosButton.setText("Usuarios");
        usuariosButton.setMaximumSize(new java.awt.Dimension(83, 23));
        usuariosButton.setMinimumSize(new java.awt.Dimension(83, 23));
        usuariosButton.setPreferredSize(new java.awt.Dimension(83, 23));
        usuariosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuariosButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 32;
        gridBagConstraints.ipady = 38;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(102, 6, 0, 490);
        menuAdmin.add(usuariosButton, gridBagConstraints);

        salir.setText("Salir");
        salir.setMaximumSize(new java.awt.Dimension(99, 23));
        salir.setMinimumSize(new java.awt.Dimension(99, 23));
        salir.setPreferredSize(new java.awt.Dimension(109, 23));
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 6;
        gridBagConstraints.ipady = 38;
        gridBagConstraints.insets = new java.awt.Insets(5, 6, 6, 490);
        menuAdmin.add(salir, gridBagConstraints);

        Contenedor.add(menuAdmin, "card3");

        pedidosPanel.setMaximumSize(new java.awt.Dimension(400, 250));
        pedidosPanel.setMinimumSize(new java.awt.Dimension(400, 250));
        pedidosPanel.setPreferredSize(new java.awt.Dimension(400, 250));

        pedidosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(pedidosTable);

        doPedido.setText("Hacer Pedido");
        doPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doPedidoActionPerformed(evt);
            }
        });

        atras.setText("Atras");
        atras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atrasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pedidosPanelLayout = new javax.swing.GroupLayout(pedidosPanel);
        pedidosPanel.setLayout(pedidosPanelLayout);
        pedidosPanelLayout.setHorizontalGroup(
            pedidosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(pedidosPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(atras)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(doPedido)
                .addContainerGap())
        );
        pedidosPanelLayout.setVerticalGroup(
            pedidosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pedidosPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pedidosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(atras)
                    .addComponent(doPedido))
                .addContainerGap(195, Short.MAX_VALUE))
        );

        Contenedor.add(pedidosPanel, "card4");

        productosPanel.setMaximumSize(new java.awt.Dimension(400, 250));
        productosPanel.setMinimumSize(new java.awt.Dimension(400, 250));
        productosPanel.setPreferredSize(new java.awt.Dimension(400, 250));

        productosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(productosTable);

        addProducto.setText("A√±adir Producto");
        addProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProductoActionPerformed(evt);
            }
        });

        atras2.setText("Atras");
        atras2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atras2ActionPerformed(evt);
            }
        });

        editProduct.setText("Editar");
        editProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editProductActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout productosPanelLayout = new javax.swing.GroupLayout(productosPanel);
        productosPanel.setLayout(productosPanelLayout);
        productosPanelLayout.setHorizontalGroup(
            productosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productosPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(productosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(productosPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(productosPanelLayout.createSequentialGroup()
                        .addComponent(atras2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editProduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addProducto))))
        );
        productosPanelLayout.setVerticalGroup(
            productosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productosPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(productosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(atras2)
                    .addComponent(addProducto)
                    .addComponent(editProduct))
                .addContainerGap(161, Short.MAX_VALUE))
        );

        Contenedor.add(productosPanel, "card5");

        distribuidoresPanel.setMaximumSize(new java.awt.Dimension(400, 250));
        distribuidoresPanel.setMinimumSize(new java.awt.Dimension(400, 250));
        distribuidoresPanel.setPreferredSize(new java.awt.Dimension(400, 250));

        distribuidoresTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(distribuidoresTable);

        addDist.setText("A√±adir Distribuidor");
        addDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDistActionPerformed(evt);
            }
        });

        atras3.setText("Atras");
        atras3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atras3ActionPerformed(evt);
            }
        });

        editDist.setText("Editar");
        editDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDistActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout distribuidoresPanelLayout = new javax.swing.GroupLayout(distribuidoresPanel);
        distribuidoresPanel.setLayout(distribuidoresPanelLayout);
        distribuidoresPanelLayout.setHorizontalGroup(
            distribuidoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distribuidoresPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(distribuidoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(distribuidoresPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(distribuidoresPanelLayout.createSequentialGroup()
                        .addComponent(atras3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editDist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addDist))))
        );
        distribuidoresPanelLayout.setVerticalGroup(
            distribuidoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distribuidoresPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(distribuidoresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(atras3)
                    .addComponent(addDist)
                    .addComponent(editDist))
                .addContainerGap(181, Short.MAX_VALUE))
        );

        Contenedor.add(distribuidoresPanel, "card6");

        usuariosPanel.setMaximumSize(new java.awt.Dimension(400, 250));
        usuariosPanel.setMinimumSize(new java.awt.Dimension(400, 250));

        usuariosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(usuariosTable);

        addUsuario.setText("A√±adir usuario");
        addUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUsuarioActionPerformed(evt);
            }
        });

        atras4.setText("Atras");
        atras4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atras4ActionPerformed(evt);
            }
        });

        editUsers.setText("Editar");
        editUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editUsersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout usuariosPanelLayout = new javax.swing.GroupLayout(usuariosPanel);
        usuariosPanel.setLayout(usuariosPanelLayout);
        usuariosPanelLayout.setHorizontalGroup(
            usuariosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usuariosPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(usuariosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(usuariosPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(usuariosPanelLayout.createSequentialGroup()
                        .addComponent(atras4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editUsers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addUsuario))))
        );
        usuariosPanelLayout.setVerticalGroup(
            usuariosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usuariosPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(usuariosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(atras4)
                    .addComponent(addUsuario)
                    .addComponent(editUsers))
                .addContainerGap(181, Short.MAX_VALUE))
        );

        Contenedor.add(usuariosPanel, "card6");

        editProdTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(editProdTable);

        acceptProduct.setText("Aceptar");
        acceptProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptProductActionPerformed(evt);
            }
        });

        cancelProducto.setText("Cancelar");
        cancelProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelProductoActionPerformed(evt);
            }
        });

        delProd.setText("Eliminar producto");
        delProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delProdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout productosEditarLayout = new javax.swing.GroupLayout(productosEditar);
        productosEditar.setLayout(productosEditarLayout);
        productosEditarLayout.setHorizontalGroup(
            productosEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productosEditarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(productosEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(productosEditarLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(cancelProducto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(delProd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(acceptProduct))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(352, Short.MAX_VALUE))
        );
        productosEditarLayout.setVerticalGroup(
            productosEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productosEditarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(productosEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptProduct)
                    .addComponent(cancelProducto)
                    .addComponent(delProd))
                .addContainerGap(210, Short.MAX_VALUE))
        );

        Contenedor.add(productosEditar, "card8");

        editUserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(editUserTable);

        acceptUser.setText("Aceptar");
        acceptUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptUserActionPerformed(evt);
            }
        });

        cancelUser.setText("Cancelar");
        cancelUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelUserActionPerformed(evt);
            }
        });

        delUsers.setText("Eliminar usuarios");
        delUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delUsersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout usuariosEditarLayout = new javax.swing.GroupLayout(usuariosEditar);
        usuariosEditar.setLayout(usuariosEditarLayout);
        usuariosEditarLayout.setHorizontalGroup(
            usuariosEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usuariosEditarLayout.createSequentialGroup()
                .addGroup(usuariosEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(usuariosEditarLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cancelUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(delUsers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(acceptUser))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 358, Short.MAX_VALUE))
        );
        usuariosEditarLayout.setVerticalGroup(
            usuariosEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usuariosEditarLayout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(usuariosEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(delUsers, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(usuariosEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(acceptUser)
                        .addComponent(cancelUser)))
                .addGap(0, 157, Short.MAX_VALUE))
        );

        Contenedor.add(usuariosEditar, "card8");

        distEditTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(distEditTable);

        acceptDist.setText("Aceptar");
        acceptDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptDistActionPerformed(evt);
            }
        });

        cancelDist.setText("Cancelar");
        cancelDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelDistActionPerformed(evt);
            }
        });

        delDist.setText("Eliminar distribuidor");
        delDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delDistActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout distribuidoresEditarLayout = new javax.swing.GroupLayout(distribuidoresEditar);
        distribuidoresEditar.setLayout(distribuidoresEditarLayout);
        distribuidoresEditarLayout.setHorizontalGroup(
            distribuidoresEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distribuidoresEditarLayout.createSequentialGroup()
                .addGroup(distribuidoresEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(distribuidoresEditarLayout.createSequentialGroup()
                        .addComponent(cancelDist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(delDist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(acceptDist))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        distribuidoresEditarLayout.setVerticalGroup(
            distribuidoresEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distribuidoresEditarLayout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(distribuidoresEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptDist)
                    .addComponent(cancelDist)
                    .addComponent(delDist))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        Contenedor.add(distribuidoresEditar, "card8");

        getContentPane().add(Contenedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 1, 810, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userTextActionPerformed

    private void pedidosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pedidosButtonActionPerformed
        Pedido[] pedidos = OperacionesBD_pedido.getListaPedidos_BD();
        dtmPedido.setRowCount(0);
        for(int i = 0; i < pedidos.length; i++){
            dtmPedido.addRow(new Object[]{pedidos[i].getPedidoId(), pedidos[i].getUserId(), pedidos[i].getFecha(), (pedidos[i].getProductos() != null?pedidos[i].getProductos().getName(): ""), pedidos[i].getDistribuidor()});
        }
        pedidosPanel.setVisible(true);
        menuAdmin.setVisible(false);
        revalidate();
        repaint();
        pack();
        setSize(840, 380);
    }//GEN-LAST:event_pedidosButtonActionPerformed

    private void accessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessActionPerformed
        if(userText.getText().isEmpty() || passField.getPassword().length == 0){
            JOptionPane.showMessageDialog(null, "Rellena los campos para continuar", "Error de acceso", JOptionPane.ERROR_MESSAGE);
        }else{
            String usuario = userText.getText();
            char[] contra = passField.getPassword();
            if(OperacionesBD_usuario.getUsuario_BD(usuario) != null){
                Usuario usuarioBD = OperacionesBD_usuario.getUsuario_BD(usuario);
                if(usuarioBD.getPass().equals(String.valueOf(contra))){
                    getRootPane().setDefaultButton(null);
                    logger = usuarioBD;
                    menuAdmin.setVisible(true);
                    loggin.setVisible(false);
                    revalidate();
                    repaint();
                    pack();
                    setSize(400, 600);
                }else{
                    JOptionPane.showMessageDialog(null, "Contrase√±a incorrecta", "Error de acceso", JOptionPane.ERROR_MESSAGE);
                }

            }else{
                JOptionPane.showMessageDialog(null, "El usuario no es correcto", "Error de acceso", JOptionPane.ERROR_MESSAGE);
            }
            
        }
    }//GEN-LAST:event_accessActionPerformed

    private void productosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productosButtonActionPerformed
        Producto[] productos = OperacionesBD_producto.getListaProductos_BD();
        dtmProducto.setRowCount(0);
        for(int i = 0; i < productos.length; i++){
            dtmProducto.addRow(new Object[]{productos[i].getName(), productos[i].getTipo(), productos[i].getDistribId(), productos[i].getPrecio(), productos[i].getCantidad()});
        }
        productosPanel.setVisible(true);
        menuAdmin.setVisible(false);
        revalidate();
        repaint();
        pack();
        setSize(840, 400);
    }//GEN-LAST:event_productosButtonActionPerformed

    private void distribuidoresButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distribuidoresButtonActionPerformed
        Distribuidor[] distribuidores = OperacionesBD_distribuidor.getListaDistribuidores_BD();
        dtmDistribuidor.setRowCount(0);
        for(int i = 0; i < distribuidores.length; i++){
            dtmDistribuidor.addRow(new Object[]{distribuidores[i].getId(), distribuidores[i].getNombre(), distribuidores[i].getMail(), distribuidores[i].getTlfn()});
        }
        distribuidoresPanel.setVisible(true);
        menuAdmin.setVisible(false);
        revalidate();
        repaint();
        pack();
        setSize(840, 400);
    }//GEN-LAST:event_distribuidoresButtonActionPerformed

    private void contabilidadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contabilidadButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contabilidadButtonActionPerformed

    private void addProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProductoActionPerformed
        JPanel ingresaProd = new JPanel();
        ingresaProd.setLayout(new BoxLayout(ingresaProd, BoxLayout.Y_AXIS)); // Establecer el layout a BoxLayout
        ingresaProd.setPreferredSize(new Dimension(300, 250)); // Establecer el tama√±o preferido del panel
        JTextField nombre = new JTextField();
        JTextField type = new JTextField();
        JTextField dist = new JTextField();
        JTextField precio = new JTextField();
        JTextField cantidad = new JTextField();
        ingresaProd.add(new JLabel("Nombre"));
        ingresaProd.add(nombre);
        ingresaProd.add(new JLabel("Tipo"));
        ingresaProd.add(type);
        ingresaProd.add(new JLabel("Distribuidor"));
        ingresaProd.add(dist);
        ingresaProd.add(new JLabel("Precio"));
        ingresaProd.add(precio);
        ingresaProd.add(new JLabel("Cantidad"));
        ingresaProd.add(cantidad);
        int result = JOptionPane.showConfirmDialog(null, ingresaProd, "A√±adir producto", JOptionPane.OK_CANCEL_OPTION);
        if(result == JOptionPane.OK_OPTION){
            Producto producto = new Producto(nombre.getText(), dist.getText(), type.getText(), new BigDecimal(precio.getText()), Integer.parseInt(cantidad.getText()));
            if(OperacionesBD_producto.addProducto_BD(producto)){
                dtmProducto.addRow(new Object[]{producto.getName(), producto.getTipo(), producto.getDistribId(), producto.getPrecio(), producto.getCantidad()});
            }
            else{
                JOptionPane.showMessageDialog(null, "El producto no se ha podido a√±adir", "Error de acceso", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addProductoActionPerformed

    private void atrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atrasActionPerformed
        pedidosPanel.setVisible(false);
        menuAdmin.setVisible(true);
        revalidate();
        repaint();
        pack();
        setSize(400, 600);
    }//GEN-LAST:event_atrasActionPerformed

    private void atras2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atras2ActionPerformed
        productosPanel.setVisible(false);
        menuAdmin.setVisible(true);
        revalidate();
        repaint();
        pack();
        setSize(400, 600);
    }//GEN-LAST:event_atras2ActionPerformed

    private void atras3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atras3ActionPerformed
        distribuidoresPanel.setVisible(false);
        menuAdmin.setVisible(true);
        revalidate();
        repaint();
        pack();
        setSize(400, 600);
    }//GEN-LAST:event_atras3ActionPerformed

    private void addDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDistActionPerformed
        JPanel ingresaDist = new JPanel();
        ingresaDist.setLayout(new BoxLayout(ingresaDist, BoxLayout.Y_AXIS)); // Establecer el layout a BoxLayout
        ingresaDist.setPreferredSize(new Dimension(300, 250)); // Establecer el tama√±o preferido del panel
        JTextField nombre = new JTextField();
        JTextField mail = new JTextField();
        JTextField tlfn = new JTextField();
        JTextField id = new JTextField();
        ingresaDist.add(new JLabel("ID"));
        ingresaDist.add(id);
        ingresaDist.add(new JLabel("Nombre"));
        ingresaDist.add(nombre);
        ingresaDist.add(new JLabel("Mail"));
        ingresaDist.add(mail);
        ingresaDist.add(new JLabel("Telefono"));
        ingresaDist.add(tlfn);
        int result = JOptionPane.showConfirmDialog(null, ingresaDist, "A√±adir distribuidor", JOptionPane.OK_CANCEL_OPTION);
        if(result == JOptionPane.OK_OPTION){
            Distribuidor distribuidor = new Distribuidor(id.getText(), nombre.getText(), mail.getText(), Integer.parseInt(tlfn.getText()));
            if(OperacionesBD_distribuidor.addDistrib_BD(distribuidor)){
                dtmDistribuidor.addRow(new Object[]{distribuidor.getId(), distribuidor.getNombre(), distribuidor.getMail(), distribuidor.getTlfn()});
            }
            else{
                JOptionPane.showMessageDialog(null, "El distribuidor no se ha podido a√±adir", "Error de acceso", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addDistActionPerformed

    private void usuariosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuariosButtonActionPerformed
        Usuario[] usuarios = OperacionesBD_usuario.getListaUsuarios_BD();
        dtmUsuario.setRowCount(0);
        for(int i = 0; i < usuarios.length; i++){
            dtmUsuario.addRow(new Object[]{usuarios[i].getNombre(), usuarios[i].getPrivileges()? "admin" : "usuario", usuarios[i].getSSId(), usuarios[i].getEmail(), usuarios[i].getTlfn() });
        }
        usuariosPanel.setVisible(true);
        menuAdmin.setVisible(false);
        revalidate();
        repaint();
        pack();
        setSize(840, 400);
    }//GEN-LAST:event_usuariosButtonActionPerformed

    private void doPedidoActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // Obtener la lista de productos existentes
        Producto[] productos = OperacionesBD_producto.getListaProductos_BD();
        
        // Crear un JComboBox con los nombres de los productos existentes
        JComboBox<String> productoComboBox = new JComboBox<>();
        for (Producto producto : productos) {
            productoComboBox.addItem(producto.getName());
        }
        
        JPanel ingresaPedido = new JPanel();
        ingresaPedido.setLayout(new BoxLayout(ingresaPedido, BoxLayout.Y_AXIS)); // Establecer el layout a BoxLayout
        ingresaPedido.setPreferredSize(new Dimension(300, 250)); // Establecer el tama√±o preferido del panel
        ingresaPedido.add(new JLabel("Producto"));
        ingresaPedido.add(productoComboBox);
        JSpinner cantidad = new JSpinner(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1));
        ingresaPedido.add(new JLabel("Cantidad"));
        ingresaPedido.add(cantidad);
        
        int result = JOptionPane.showConfirmDialog(null, ingresaPedido, "Realizar pedido", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            String selectedProduct = (String) productoComboBox.getSelectedItem();
            // Aqu√≠ puedes agregar la l√≥gica para realizar el pedido con el producto seleccionado
            Pedido pedido = new Pedido(logger.getSSId(), OperacionesBD_producto.getProducto_BD(selectedProduct));
            BigDecimal cantidadValue = new BigDecimal(cantidad.getValue().toString());
            pedido.setDistribuidor(OperacionesBD_producto.getProducto_BD(selectedProduct).getDistribId());
            Pedido[] pedidos = OperacionesBD_pedido.getListaPedidos_BD();
           if(OperacionesBD_pedido.addPedido_BD(pedido)){
                dtmPedido.addRow(new Object[]{pedidos[pedidos.length-1].getPedidoId(), pedidos[pedidos.length-1].getUserId(), pedidos[pedidos.length-1].getFecha(), selectedProduct,pedidos[pedidos.length-1].getDistribuidor()});
              }
              else{
                JOptionPane.showMessageDialog(null, "El pedido no se ha podido a√±adir", "Error de acceso", JOptionPane.ERROR_MESSAGE);
              
           }
        }
    }
    private void addUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUsuarioActionPerformed
        JPanel ingresaUsuario = new JPanel();
        ingresaUsuario.setLayout(new BoxLayout(ingresaUsuario, BoxLayout.Y_AXIS)); // Establecer el layout a BoxLayout
        ingresaUsuario.setPreferredSize(new Dimension(300, 300)); // Establecer el tama√±o preferido del panel
        JTextField nombre = new JTextField();
        JCheckBox rango = new JCheckBox();
        JTextField SSId = new JTextField();
        JTextField mail = new JTextField();
        JTextField tlfn = new JTextField();
        JTextField user = new JTextField();
        JTextField pass = new JTextField();
        ingresaUsuario.add(new JLabel("Nombre"));
        ingresaUsuario.add(nombre);
        ingresaUsuario.add(new JLabel("SSId"));
        ingresaUsuario.add(SSId);
        ingresaUsuario.add(new JLabel("Mail"));
        ingresaUsuario.add(mail);
        ingresaUsuario.add(new JLabel("Telefono"));
        ingresaUsuario.add(tlfn);
        ingresaUsuario.add(new JLabel("Usuario"));
        ingresaUsuario.add(user);
        ingresaUsuario.add(new JLabel("Contrase√±a"));
        ingresaUsuario.add(pass);
        ingresaUsuario.add(new JLabel("Administrador"));
        ingresaUsuario.add(rango);

        int result = JOptionPane.showConfirmDialog(null, ingresaUsuario, "A√±adir usuario", JOptionPane.OK_CANCEL_OPTION);
        if(result == JOptionPane.OK_OPTION){
            Usuario usuario = new Usuario(user.getText(),pass.getText(), rango.isSelected(), nombre.getText(), Integer.parseInt(SSId.getText()), mail.getText(), Integer.parseInt(tlfn.getText()));
            if(OperacionesBD_usuario.addUsuario_BD(usuario)){
                dtmUsuario.addRow(new Object[]{usuario.getNombre(), usuario.getPrivileges()? "admin" : "usuario", usuario.getSSId(), usuario.getEmail(), usuario.getTlfn(), "Modificar"});
            }
            else{
                JOptionPane.showMessageDialog(null, "El usuario no se ha podido a√±adir", "Error de acceso", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addUsuarioActionPerformed

    private void atras4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atras4ActionPerformed
        Usuario[] usuarios = OperacionesBD_usuario.getListaUsuarios_BD();
        dtmUsuario.setRowCount(0);
        for(int i = 0; i < usuarios.length; i++){
            dtmUsuario.addRow(new Object[]{usuarios[i].getNombre(), usuarios[i].getPrivileges()? "admin" : "usuario", usuarios[i].getSSId(), usuarios[i].getEmail(), usuarios[i].getTlfn()});
        }
        usuariosPanel.setVisible(false);
        menuAdmin.setVisible(true);
        revalidate();
        repaint();
        pack();
        setSize(400, 600);
    }//GEN-LAST:event_atras4ActionPerformed
    private void acceptProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptProductActionPerformed
        for (int i = 0; i < editProdTable.getRowCount(); i++) {
            for (int j = 0; j < editProdTable.getColumnCount(); j++) {
                Object editProdCellValue = editProdTable.getValueAt(i, j);
                Object prodCellValue = productosTable.getValueAt(i, j);
                if (editProdCellValue != null && !editProdCellValue.equals(prodCellValue)) {
                    productosTable.setValueAt(editProdCellValue, i, j);
                    String nombre = (String) productosTable.getValueAt(i, 0);
                    Producto producto = OperacionesBD_producto.getProducto_BD(nombre);
                    OperacionesBD_producto.delProducto_BD(producto.getName());
                    switch (j) {
                        case 0:
                            producto.setName((String) editProdCellValue);
                            break;
                        case 1:
                            producto.setTipo((String) editProdCellValue);
                            break;
                        case 2:
                            producto.setDistribuidorId((String) editProdCellValue);
                            break;
                        case 3:
                            if (editProdCellValue instanceof BigDecimal) {
                                producto.setPrecio((BigDecimal) editProdCellValue);
                            } else if (editProdCellValue instanceof String) {
                                producto.setPrecio(new BigDecimal((String) editProdCellValue));
                            } else {
                                throw new IllegalArgumentException("Precio debe ser BigDecimal o String que pueda convertirse a BigDecimal");
                            }
                            break;
                        case 4:
                            if (editProdCellValue instanceof Integer) {
                                producto.setCantidad((Integer) editProdCellValue);
                            } else if (editProdCellValue instanceof String) {
                                producto.setCantidad(Integer.parseInt((String) editProdCellValue));
                            } else {
                                throw new IllegalArgumentException("Cantidad debe ser Integer o String que pueda convertirse a Integer");
                            }
                            break;
                    }
                    productosTable.setValueAt(editProdCellValue, i, j);
                    OperacionesBD_producto.addProducto_BD(producto);
                }
            }
        } 
        productosEditar.setVisible(false);
        productosPanel.setVisible(true);
        productosPanel.repaint();
        revalidate();
        repaint();
        pack();
        setSize(840, 400);
    }//GEN-LAST:event_acceptProductActionPerformed

    private void cancelProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelProductoActionPerformed
        productosEditar.setVisible(false);
        productosPanel.setVisible(true);
        revalidate();
        repaint();
        pack();
        setSize(840, 400);
    }//GEN-LAST:event_cancelProductoActionPerformed

    private void acceptUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptUserActionPerformed
        for (int i = 0; i < editUserTable.getRowCount(); i++) {
            for (int j = 0; j < editUserTable.getColumnCount(); j++) {
                Object editUserCellValue = editUserTable.getValueAt(i, j);
                Object userCellValue = usuariosTable.getValueAt(i, j);
                if (editUserCellValue != null && !editUserCellValue.equals(userCellValue)) {
                    Object ssidObject = usuariosTable.getValueAt(i, 2);
                    int ssid;
                    if (ssidObject instanceof Integer) {
                        ssid = (Integer) ssidObject;
                    } else if (ssidObject instanceof String) {
                        try {
                            ssid = Integer.parseInt((String) ssidObject);
                        } catch (NumberFormatException e) {
                            throw new IllegalArgumentException("SSID debe ser un String que pueda convertirse a Integer");
                        }
                    }else {
                        throw new IllegalArgumentException("SSID debe ser Integer o String que pueda convertirse a Integer");
                    }
                    Usuario usuario = OperacionesBD_usuario.getUsuarioSSId_BD(ssid);
                    OperacionesBD_usuario.delUsuario_BD(usuario.getUsername());
                    usuariosTable.setValueAt(editUserCellValue, i, j);
                    switch (j) {
                        case 0:
                            usuario.setNombre((String) editUserCellValue);
                            break;
                        case 1:
                            if(editUserCellValue.equals("admin")){
                                usuario.setPrivileges(true);
                            }else{
                                usuario.setPrivileges(false);
                            }

                            break;
                        case 2:
                            usuario.setSSId(Integer.parseInt((String) editUserCellValue));
                            break;
                        case 3:
                            usuario.setEmail((String) editUserCellValue);
                            break;
                        case 4:
                            if(editUserCellValue instanceof String){
                                usuario.setTlfn(Integer.parseInt((String) editUserCellValue));
                            }else{
                                usuario.setTlfn((int) editUserCellValue);
                            }
                            break;
                    }
                    usuariosTable.setValueAt(editUserCellValue, i, j);
                    OperacionesBD_usuario.addUsuario_BD(usuario);
                }
            }
        } 
        usuariosEditar.setVisible(false);
        usuariosPanel.setVisible(true);
        usuariosPanel.repaint();
        revalidate();
        repaint();
        pack();
        setSize(840, 400);    
    }//GEN-LAST:event_acceptUserActionPerformed

    private void cancelUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelUserActionPerformed
        usuariosEditar.setVisible(false);
        usuariosPanel.setVisible(true);
        revalidate();
        repaint();
        pack();
        setSize(840, 400);
    }//GEN-LAST:event_cancelUserActionPerformed

    private void cancelDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelDistActionPerformed
        distribuidoresEditar.setVisible(false);
        distribuidoresPanel.setVisible(true);
        revalidate();
        repaint();
        pack();
        setSize(840, 400);
    }//GEN-LAST:event_cancelDistActionPerformed

    private void editUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editUsersActionPerformed
        dtmeditUser.setRowCount(0);
        Usuario[] usuarios = OperacionesBD_usuario.getListaUsuarios_BD();
        for(int i = 0; i < usuarios.length; i++){
            dtmeditUser.addRow(new Object[]{usuarios[i].getNombre(), usuarios[i].getPrivileges()? "admin" : "usuario", usuarios[i].getSSId(), usuarios[i].getEmail(), usuarios[i].getTlfn(), "Modificar"});
        }
        usuariosPanel.setVisible(false);
        usuariosEditar.setVisible(true);
        revalidate();
        repaint();
        pack();
        setSize(600, 400);
    }//GEN-LAST:event_editUsersActionPerformed

    private void editDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDistActionPerformed
        dtmeditDist.setRowCount(0);
        Distribuidor[] distribuidores = OperacionesBD_distribuidor.getListaDistribuidores_BD();
        for(int i = 0; i < distribuidores.length; i++){
            dtmeditDist.addRow(new Object[]{distribuidores[i].getId(), distribuidores[i].getNombre(), distribuidores[i].getMail(), distribuidores[i].getTlfn(), "Modificar"});
        }
        distribuidoresPanel.setVisible(false);
        distribuidoresEditar.setVisible(true);
        revalidate();
        repaint();
        pack();
        setSize(840, 400);
    }//GEN-LAST:event_editDistActionPerformed

    private void acceptDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptDistActionPerformed
        for (int i = 0; i < distEditTable.getRowCount(); i++) {
            for (int j = 0; j < distEditTable.getColumnCount(); j++) {
                Object editDistCellValue = distEditTable.getValueAt(i, j);
                Object distCellValue = distribuidoresTable.getValueAt(i, j);
                if (editDistCellValue != null && !editDistCellValue.equals(distCellValue)) {
                    distribuidoresTable.setValueAt(editDistCellValue, i, j);
                    String id = (String) distribuidoresTable.getValueAt(i, 0);
                    Distribuidor distribuidor = OperacionesBD_distribuidor.getDistribuidor_BD(id);
                    switch (j) {
                        case 0:
                            distribuidor.setId((String) editDistCellValue);
                            break;
                        case 1:
                            distribuidor.setNombre((String) editDistCellValue);
                            break;
                        case 2:
                            distribuidor.setMail((String) editDistCellValue);
                            break;
                        case 3:
                            distribuidor.setTlfn((int) editDistCellValue);
                            break;
                    }
                    OperacionesBD_distribuidor.delDistribuidor_BD(id);
                    OperacionesBD_distribuidor.addDistrib_BD(distribuidor);
                }
            }
        }
    }//GEN-LAST:event_acceptDistActionPerformed

    private void editProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editProductActionPerformed
        dtmeditProd.setRowCount(0);
        Producto[] productos = OperacionesBD_producto.getListaProductos_BD();
        for(int i = 0; i < productos.length; i++){
            dtmeditProd.addRow(new Object[]{productos[i].getName(), productos[i].getTipo(), productos[i].getDistribId(), productos[i].getPrecio(), productos[i].getCantidad(), "Modificar"});
        }
        productosPanel.setVisible(false);
        productosEditar.setVisible(true);
        revalidate();
        repaint();
        pack();
        setSize(600, 350);
    }//GEN-LAST:event_editProductActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        menuAdmin.setVisible(false);
        loggin.setVisible(true);
        revalidate();
        repaint();
        pack();
        setSize(400, 600);
    }//GEN-LAST:event_salirActionPerformed

    private void delUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delUsersActionPerformed
        // Obtener la lista de usuarios
        Usuario[] usuaries = OperacionesBD_usuario.getListaUsuarios_BD();
        String[] usuarios = new String[usuaries.length];
        for (int i = 0; i < usuaries.length; i++) {
            usuarios[i] = usuaries[i].getUsername();
        }
        // Mostrar el JOptionPane con el desplegable de usuarios
        String usuarioSeleccionado = (String) JOptionPane.showInputDialog(
            this,
            "Selecciona un usuario:",
            "Eliminar Usuario",
            JOptionPane.QUESTION_MESSAGE,
            null,
            usuarios,
            usuarios[0]);

        // Si se selecciona un usuario y se pulsa el bot√≥n de aceptar
        if (usuarioSeleccionado != null) {
            int opcion = JOptionPane.showConfirmDialog(
                this,
                "¬øEst√°s seguro de que quieres eliminar al usuario " + usuarioSeleccionado + "?",
                "Confirmar Eliminaci√≥n",
                JOptionPane.YES_NO_OPTION);

            // Si se confirma la eliminaci√≥n del usuario
            if (opcion == JOptionPane.YES_OPTION) {
                // Eliminar el usuario
                OperacionesBD_usuario.delUsuario_BD(usuarioSeleccionado);
            }
        }
    }
//GEN-LAST:event_delUsersActionPerformed

    private void delProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delProdActionPerformed
        // Obtener la lista de productos
        Producto[] productos = OperacionesBD_producto.getListaProductos_BD();
        String[] productosString = new String[productos.length];
        for (int i = 0; i < productos.length; i++) {
            productosString[i] = productos[i].getName();
        }
        // Mostrar el JOptionPane con el desplegable de productos
        String productoSeleccionado = (String) JOptionPane.showInputDialog(
            this,
            "Selecciona un producto:",
            "Eliminar Producto",
            JOptionPane.QUESTION_MESSAGE,
            null,
            productosString,
            productosString[0]);

        // Si se selecciona un producto y se pulsa el bot√≥n de aceptar
        if (productoSeleccionado != null) {
            int opcion = JOptionPane.showConfirmDialog(
                this,
                "¬øEst√°s seguro de que quieres eliminar el producto " + productoSeleccionado + "?",
                "Confirmar Eliminaci√≥n",
                JOptionPane.YES_NO_OPTION);

            // Si se confirma la eliminaci√≥n del producto
            if (opcion == JOptionPane.YES_OPTION) {
                // Eliminar el producto
                OperacionesBD_producto.delProducto_BD(productoSeleccionado);
            }
        }
    }//GEN-LAST:event_delProdActionPerformed

    private void delDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delDistActionPerformed
        // Obtener la lista de distribuidores
        Distribuidor[] distribuidores = OperacionesBD_distribuidor.getListaDistribuidores_BD();
        String[] distribuidoresString = new String[distribuidores.length];
        for (int i = 0; i < distribuidores.length; i++) {
            distribuidoresString[i] = distribuidores[i].getNombre();
        }
        // Mostrar el JOptionPane con el desplegable de distribuidores
        String distribuidorSeleccionado = (String) JOptionPane.showInputDialog(
            this,
            "Selecciona un distribuidor:",
            "Eliminar Distribuidor",
            JOptionPane.QUESTION_MESSAGE,
            null,
            distribuidoresString,
            distribuidoresString[0]);

        // Si se selecciona un distribuidor y se pulsa el bot√≥n de aceptar
        if (distribuidorSeleccionado != null) {
            int opcion = JOptionPane.showConfirmDialog(
                this,
                "¬øEst√°s seguro de que quieres eliminar el distribuidor " + distribuidorSeleccionado + "?",
                "Confirmar Eliminaci√≥n",
                JOptionPane.YES_NO_OPTION);

            // Si se confirma la eliminaci√≥n del distribuidor
            if (opcion == JOptionPane.YES_OPTION) {
                // Eliminar el distribuidor
                OperacionesBD_distribuidor.delDistribuidor_BD(distribuidorSeleccionado);
            }
        }
    }//GEN-LAST:event_delDistActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventanal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventanal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventanal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventanal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventanal().setVisible(true);
            }
        });
        
        /* No es necesario */
        //Connection con = Conexion.getConexion();
        //Desconexi√≥n de la BD
        //Conexion.closeConexion(con);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Contenedor;
    private javax.swing.JButton acceptDist;
    private javax.swing.JButton acceptProduct;
    private javax.swing.JButton acceptUser;
    private javax.swing.JButton access;
    private javax.swing.JButton addDist;
    private javax.swing.JButton addProducto;
    private javax.swing.JButton addUsuario;
    private javax.swing.JButton atras;
    private javax.swing.JButton atras2;
    private javax.swing.JButton atras3;
    private javax.swing.JButton atras4;
    private javax.swing.JButton cancelDist;
    private javax.swing.JButton cancelProducto;
    private javax.swing.JButton cancelUser;
    private javax.swing.JButton contabilidadButton;
    private javax.swing.JButton delDist;
    private javax.swing.JButton delProd;
    private javax.swing.JButton delUsers;
    private javax.swing.JTable distEditTable;
    private javax.swing.JButton distribuidoresButton;
    private javax.swing.JPanel distribuidoresEditar;
    private javax.swing.JPanel distribuidoresPanel;
    private javax.swing.JTable distribuidoresTable;
    private javax.swing.JButton doPedido;
    private javax.swing.JButton editDist;
    private javax.swing.JTable editProdTable;
    private javax.swing.JButton editProduct;
    private javax.swing.JTable editUserTable;
    private javax.swing.JButton editUsers;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPanel loggin;
    private javax.swing.JPanel menuAdmin;
    private javax.swing.JPasswordField passField;
    private javax.swing.JButton pedidosButton;
    private javax.swing.JPanel pedidosPanel;
    private javax.swing.JTable pedidosTable;
    private javax.swing.JButton productosButton;
    private javax.swing.JPanel productosEditar;
    private javax.swing.JPanel productosPanel;
    private javax.swing.JTable productosTable;
    private javax.swing.JButton salir;
    private javax.swing.JTextField userText;
    private javax.swing.JButton usuariosButton;
    private javax.swing.JPanel usuariosEditar;
    private javax.swing.JPanel usuariosPanel;
    private javax.swing.JTable usuariosTable;
    // End of variables declaration//GEN-END:variables
}
